# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: debug.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import debug_pb2


class DebugBase(abc.ABC):

    @abc.abstractmethod
    async def SayHello(self, stream: 'grpclib.server.Stream[debug_pb2.String, debug_pb2.String]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/debug.Debug/SayHello': grpclib.const.Handler(
                self.SayHello,
                grpclib.const.Cardinality.UNARY_UNARY,
                debug_pb2.String,
                debug_pb2.String,
            ),
        }


class DebugStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.SayHello = grpclib.client.UnaryUnaryMethod(
            channel,
            '/debug.Debug/SayHello',
            debug_pb2.String,
            debug_pb2.String,
        )
