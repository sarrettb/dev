// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redtangle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_redtangle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_redtangle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_redtangle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_redtangle_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_redtangle_2eproto;
namespace redtangle_grpc {
class ConnectRequest;
struct ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectResponse;
struct ConnectResponseDefaultTypeInternal;
extern ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
class DisconnectRequest;
struct DisconnectRequestDefaultTypeInternal;
extern DisconnectRequestDefaultTypeInternal _DisconnectRequest_default_instance_;
class DisconnectResponse;
struct DisconnectResponseDefaultTypeInternal;
extern DisconnectResponseDefaultTypeInternal _DisconnectResponse_default_instance_;
class EndTurnRequest;
struct EndTurnRequestDefaultTypeInternal;
extern EndTurnRequestDefaultTypeInternal _EndTurnRequest_default_instance_;
class EndTurnResponse;
struct EndTurnResponseDefaultTypeInternal;
extern EndTurnResponseDefaultTypeInternal _EndTurnResponse_default_instance_;
class GetStatusRequest;
struct GetStatusRequestDefaultTypeInternal;
extern GetStatusRequestDefaultTypeInternal _GetStatusRequest_default_instance_;
class GetStatusResponse;
struct GetStatusResponseDefaultTypeInternal;
extern GetStatusResponseDefaultTypeInternal _GetStatusResponse_default_instance_;
class Piece;
struct PieceDefaultTypeInternal;
extern PieceDefaultTypeInternal _Piece_default_instance_;
class RotateRequest;
struct RotateRequestDefaultTypeInternal;
extern RotateRequestDefaultTypeInternal _RotateRequest_default_instance_;
class RotateResponse;
struct RotateResponseDefaultTypeInternal;
extern RotateResponseDefaultTypeInternal _RotateResponse_default_instance_;
class SelectRequest;
struct SelectRequestDefaultTypeInternal;
extern SelectRequestDefaultTypeInternal _SelectRequest_default_instance_;
class SelectResponse;
struct SelectResponseDefaultTypeInternal;
extern SelectResponseDefaultTypeInternal _SelectResponse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace redtangle_grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::redtangle_grpc::ConnectRequest* Arena::CreateMaybeMessage<::redtangle_grpc::ConnectRequest>(Arena*);
template<> ::redtangle_grpc::ConnectResponse* Arena::CreateMaybeMessage<::redtangle_grpc::ConnectResponse>(Arena*);
template<> ::redtangle_grpc::DisconnectRequest* Arena::CreateMaybeMessage<::redtangle_grpc::DisconnectRequest>(Arena*);
template<> ::redtangle_grpc::DisconnectResponse* Arena::CreateMaybeMessage<::redtangle_grpc::DisconnectResponse>(Arena*);
template<> ::redtangle_grpc::EndTurnRequest* Arena::CreateMaybeMessage<::redtangle_grpc::EndTurnRequest>(Arena*);
template<> ::redtangle_grpc::EndTurnResponse* Arena::CreateMaybeMessage<::redtangle_grpc::EndTurnResponse>(Arena*);
template<> ::redtangle_grpc::GetStatusRequest* Arena::CreateMaybeMessage<::redtangle_grpc::GetStatusRequest>(Arena*);
template<> ::redtangle_grpc::GetStatusResponse* Arena::CreateMaybeMessage<::redtangle_grpc::GetStatusResponse>(Arena*);
template<> ::redtangle_grpc::Piece* Arena::CreateMaybeMessage<::redtangle_grpc::Piece>(Arena*);
template<> ::redtangle_grpc::RotateRequest* Arena::CreateMaybeMessage<::redtangle_grpc::RotateRequest>(Arena*);
template<> ::redtangle_grpc::RotateResponse* Arena::CreateMaybeMessage<::redtangle_grpc::RotateResponse>(Arena*);
template<> ::redtangle_grpc::SelectRequest* Arena::CreateMaybeMessage<::redtangle_grpc::SelectRequest>(Arena*);
template<> ::redtangle_grpc::SelectResponse* Arena::CreateMaybeMessage<::redtangle_grpc::SelectResponse>(Arena*);
template<> ::redtangle_grpc::Status* Arena::CreateMaybeMessage<::redtangle_grpc::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace redtangle_grpc {

enum Color : int {
  WHITE = 0,
  BLACK = 1,
  Color_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Color_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Color_IsValid(int value);
constexpr Color Color_MIN = WHITE;
constexpr Color Color_MAX = BLACK;
constexpr int Color_ARRAYSIZE = Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor();
template<typename T>
inline const std::string& Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_descriptor(), enum_t_value);
}
inline bool Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
// ===================================================================

class Piece final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.Piece) */ {
 public:
  inline Piece() : Piece(nullptr) {}
  ~Piece() override;
  explicit PROTOBUF_CONSTEXPR Piece(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Piece(const Piece& from);
  Piece(Piece&& from) noexcept
    : Piece() {
    *this = ::std::move(from);
  }

  inline Piece& operator=(const Piece& from) {
    CopyFrom(from);
    return *this;
  }
  inline Piece& operator=(Piece&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Piece& default_instance() {
    return *internal_default_instance();
  }
  static inline const Piece* internal_default_instance() {
    return reinterpret_cast<const Piece*>(
               &_Piece_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Piece& a, Piece& b) {
    a.Swap(&b);
  }
  inline void Swap(Piece* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Piece* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Piece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Piece>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Piece& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Piece& from) {
    Piece::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Piece* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.Piece";
  }
  protected:
  explicit Piece(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidesFieldNumber = 2,
    kTeamColorFieldNumber = 1,
  };
  // repeated .redtangle_grpc.Color sides = 2;
  int sides_size() const;
  private:
  int _internal_sides_size() const;
  public:
  void clear_sides();
  private:
  ::redtangle_grpc::Color _internal_sides(int index) const;
  void _internal_add_sides(::redtangle_grpc::Color value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_sides();
  public:
  ::redtangle_grpc::Color sides(int index) const;
  void set_sides(int index, ::redtangle_grpc::Color value);
  void add_sides(::redtangle_grpc::Color value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& sides() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_sides();

  // .redtangle_grpc.Color team_color = 1;
  void clear_team_color();
  ::redtangle_grpc::Color team_color() const;
  void set_team_color(::redtangle_grpc::Color value);
  private:
  ::redtangle_grpc::Color _internal_team_color() const;
  void _internal_set_team_color(::redtangle_grpc::Color value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.Piece)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> sides_;
    mutable std::atomic<int> _sides_cached_byte_size_;
    int team_color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardFieldNumber = 6,
    kWinnerFieldNumber = 2,
    kOpponentFieldNumber = 3,
    kTurnFieldNumber = 1,
    kWhitePiecesFieldNumber = 4,
    kBlackPiecesFieldNumber = 5,
  };
  // repeated .redtangle_grpc.Piece board = 6;
  int board_size() const;
  private:
  int _internal_board_size() const;
  public:
  void clear_board();
  ::redtangle_grpc::Piece* mutable_board(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redtangle_grpc::Piece >*
      mutable_board();
  private:
  const ::redtangle_grpc::Piece& _internal_board(int index) const;
  ::redtangle_grpc::Piece* _internal_add_board();
  public:
  const ::redtangle_grpc::Piece& board(int index) const;
  ::redtangle_grpc::Piece* add_board();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redtangle_grpc::Piece >&
      board() const;

  // string winner = 2;
  void clear_winner();
  const std::string& winner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_winner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_winner();
  PROTOBUF_NODISCARD std::string* release_winner();
  void set_allocated_winner(std::string* winner);
  private:
  const std::string& _internal_winner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_winner(const std::string& value);
  std::string* _internal_mutable_winner();
  public:

  // string opponent = 3;
  void clear_opponent();
  const std::string& opponent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opponent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opponent();
  PROTOBUF_NODISCARD std::string* release_opponent();
  void set_allocated_opponent(std::string* opponent);
  private:
  const std::string& _internal_opponent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opponent(const std::string& value);
  std::string* _internal_mutable_opponent();
  public:

  // .redtangle_grpc.Color turn = 1;
  void clear_turn();
  ::redtangle_grpc::Color turn() const;
  void set_turn(::redtangle_grpc::Color value);
  private:
  ::redtangle_grpc::Color _internal_turn() const;
  void _internal_set_turn(::redtangle_grpc::Color value);
  public:

  // int32 white_pieces = 4;
  void clear_white_pieces();
  int32_t white_pieces() const;
  void set_white_pieces(int32_t value);
  private:
  int32_t _internal_white_pieces() const;
  void _internal_set_white_pieces(int32_t value);
  public:

  // int32 black_pieces = 5;
  void clear_black_pieces();
  int32_t black_pieces() const;
  void set_black_pieces(int32_t value);
  private:
  int32_t _internal_black_pieces() const;
  void _internal_set_black_pieces(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redtangle_grpc::Piece > board_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr winner_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opponent_;
    int turn_;
    int32_t white_pieces_;
    int32_t black_pieces_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class ConnectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.ConnectRequest) */ {
 public:
  inline ConnectRequest() : ConnectRequest(nullptr) {}
  ~ConnectRequest() override;
  explicit PROTOBUF_CONSTEXPR ConnectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectRequest(const ConnectRequest& from);
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectRequest& from) {
    ConnectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.ConnectRequest";
  }
  protected:
  explicit ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.ConnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class ConnectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.ConnectResponse) */ {
 public:
  inline ConnectResponse() : ConnectResponse(nullptr) {}
  ~ConnectResponse() override;
  explicit PROTOBUF_CONSTEXPR ConnectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectResponse(const ConnectResponse& from);
  ConnectResponse(ConnectResponse&& from) noexcept
    : ConnectResponse() {
    *this = ::std::move(from);
  }

  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectResponse& operator=(ConnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectResponse*>(
               &_ConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConnectResponse& a, ConnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectResponse& from) {
    ConnectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.ConnectResponse";
  }
  protected:
  explicit ConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kIsWhiteFieldNumber = 2,
  };
  // int32 game_id = 1;
  void clear_game_id();
  int32_t game_id() const;
  void set_game_id(int32_t value);
  private:
  int32_t _internal_game_id() const;
  void _internal_set_game_id(int32_t value);
  public:

  // bool is_white = 2;
  void clear_is_white();
  bool is_white() const;
  void set_is_white(bool value);
  private:
  bool _internal_is_white() const;
  void _internal_set_is_white(bool value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.ConnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t game_id_;
    bool is_white_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class SelectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.SelectRequest) */ {
 public:
  inline SelectRequest() : SelectRequest(nullptr) {}
  ~SelectRequest() override;
  explicit PROTOBUF_CONSTEXPR SelectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectRequest(const SelectRequest& from);
  SelectRequest(SelectRequest&& from) noexcept
    : SelectRequest() {
    *this = ::std::move(from);
  }

  inline SelectRequest& operator=(const SelectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectRequest& operator=(SelectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectRequest* internal_default_instance() {
    return reinterpret_cast<const SelectRequest*>(
               &_SelectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SelectRequest& a, SelectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelectRequest& from) {
    SelectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.SelectRequest";
  }
  protected:
  explicit SelectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kGameIdFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 game_id = 1;
  void clear_game_id();
  int32_t game_id() const;
  void set_game_id(int32_t value);
  private:
  int32_t _internal_game_id() const;
  void _internal_set_game_id(int32_t value);
  public:

  // int32 x = 3;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 4;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.SelectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    int32_t game_id_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class SelectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.SelectResponse) */ {
 public:
  inline SelectResponse() : SelectResponse(nullptr) {}
  ~SelectResponse() override;
  explicit PROTOBUF_CONSTEXPR SelectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectResponse(const SelectResponse& from);
  SelectResponse(SelectResponse&& from) noexcept
    : SelectResponse() {
    *this = ::std::move(from);
  }

  inline SelectResponse& operator=(const SelectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectResponse& operator=(SelectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectResponse* internal_default_instance() {
    return reinterpret_cast<const SelectResponse*>(
               &_SelectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SelectResponse& a, SelectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelectResponse& from) {
    SelectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.SelectResponse";
  }
  protected:
  explicit SelectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.SelectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class RotateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.RotateRequest) */ {
 public:
  inline RotateRequest() : RotateRequest(nullptr) {}
  ~RotateRequest() override;
  explicit PROTOBUF_CONSTEXPR RotateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RotateRequest(const RotateRequest& from);
  RotateRequest(RotateRequest&& from) noexcept
    : RotateRequest() {
    *this = ::std::move(from);
  }

  inline RotateRequest& operator=(const RotateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotateRequest& operator=(RotateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RotateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RotateRequest* internal_default_instance() {
    return reinterpret_cast<const RotateRequest*>(
               &_RotateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RotateRequest& a, RotateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RotateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RotateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RotateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RotateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RotateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RotateRequest& from) {
    RotateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.RotateRequest";
  }
  protected:
  explicit RotateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kGameIdFieldNumber = 1,
    kClockwiseFieldNumber = 3,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 game_id = 1;
  void clear_game_id();
  int32_t game_id() const;
  void set_game_id(int32_t value);
  private:
  int32_t _internal_game_id() const;
  void _internal_set_game_id(int32_t value);
  public:

  // bool clockwise = 3;
  void clear_clockwise();
  bool clockwise() const;
  void set_clockwise(bool value);
  private:
  bool _internal_clockwise() const;
  void _internal_set_clockwise(bool value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.RotateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    int32_t game_id_;
    bool clockwise_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class RotateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.RotateResponse) */ {
 public:
  inline RotateResponse() : RotateResponse(nullptr) {}
  ~RotateResponse() override;
  explicit PROTOBUF_CONSTEXPR RotateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RotateResponse(const RotateResponse& from);
  RotateResponse(RotateResponse&& from) noexcept
    : RotateResponse() {
    *this = ::std::move(from);
  }

  inline RotateResponse& operator=(const RotateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotateResponse& operator=(RotateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RotateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RotateResponse* internal_default_instance() {
    return reinterpret_cast<const RotateResponse*>(
               &_RotateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RotateResponse& a, RotateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RotateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RotateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RotateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RotateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RotateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RotateResponse& from) {
    RotateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.RotateResponse";
  }
  protected:
  explicit RotateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.RotateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class EndTurnRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.EndTurnRequest) */ {
 public:
  inline EndTurnRequest() : EndTurnRequest(nullptr) {}
  ~EndTurnRequest() override;
  explicit PROTOBUF_CONSTEXPR EndTurnRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndTurnRequest(const EndTurnRequest& from);
  EndTurnRequest(EndTurnRequest&& from) noexcept
    : EndTurnRequest() {
    *this = ::std::move(from);
  }

  inline EndTurnRequest& operator=(const EndTurnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndTurnRequest& operator=(EndTurnRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndTurnRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndTurnRequest* internal_default_instance() {
    return reinterpret_cast<const EndTurnRequest*>(
               &_EndTurnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EndTurnRequest& a, EndTurnRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EndTurnRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndTurnRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndTurnRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndTurnRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EndTurnRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EndTurnRequest& from) {
    EndTurnRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndTurnRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.EndTurnRequest";
  }
  protected:
  explicit EndTurnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 game_id = 1;
  void clear_game_id();
  int32_t game_id() const;
  void set_game_id(int32_t value);
  private:
  int32_t _internal_game_id() const;
  void _internal_set_game_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.EndTurnRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    int32_t game_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class EndTurnResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.EndTurnResponse) */ {
 public:
  inline EndTurnResponse() : EndTurnResponse(nullptr) {}
  ~EndTurnResponse() override;
  explicit PROTOBUF_CONSTEXPR EndTurnResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndTurnResponse(const EndTurnResponse& from);
  EndTurnResponse(EndTurnResponse&& from) noexcept
    : EndTurnResponse() {
    *this = ::std::move(from);
  }

  inline EndTurnResponse& operator=(const EndTurnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndTurnResponse& operator=(EndTurnResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndTurnResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndTurnResponse* internal_default_instance() {
    return reinterpret_cast<const EndTurnResponse*>(
               &_EndTurnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EndTurnResponse& a, EndTurnResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EndTurnResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndTurnResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndTurnResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndTurnResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EndTurnResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EndTurnResponse& from) {
    EndTurnResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndTurnResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.EndTurnResponse";
  }
  protected:
  explicit EndTurnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.EndTurnResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class GetStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.GetStatusRequest) */ {
 public:
  inline GetStatusRequest() : GetStatusRequest(nullptr) {}
  ~GetStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR GetStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatusRequest(const GetStatusRequest& from);
  GetStatusRequest(GetStatusRequest&& from) noexcept
    : GetStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetStatusRequest& operator=(const GetStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusRequest& operator=(GetStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatusRequest*>(
               &_GetStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetStatusRequest& a, GetStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStatusRequest& from) {
    GetStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.GetStatusRequest";
  }
  protected:
  explicit GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 game_id = 1;
  void clear_game_id();
  int32_t game_id() const;
  void set_game_id(int32_t value);
  private:
  int32_t _internal_game_id() const;
  void _internal_set_game_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.GetStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    int32_t game_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class GetStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.GetStatusResponse) */ {
 public:
  inline GetStatusResponse() : GetStatusResponse(nullptr) {}
  ~GetStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR GetStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatusResponse(const GetStatusResponse& from);
  GetStatusResponse(GetStatusResponse&& from) noexcept
    : GetStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetStatusResponse& operator=(const GetStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusResponse& operator=(GetStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatusResponse*>(
               &_GetStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetStatusResponse& a, GetStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStatusResponse& from) {
    GetStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.GetStatusResponse";
  }
  protected:
  explicit GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameStatusFieldNumber = 1,
  };
  // .redtangle_grpc.Status game_status = 1;
  bool has_game_status() const;
  private:
  bool _internal_has_game_status() const;
  public:
  void clear_game_status();
  const ::redtangle_grpc::Status& game_status() const;
  PROTOBUF_NODISCARD ::redtangle_grpc::Status* release_game_status();
  ::redtangle_grpc::Status* mutable_game_status();
  void set_allocated_game_status(::redtangle_grpc::Status* game_status);
  private:
  const ::redtangle_grpc::Status& _internal_game_status() const;
  ::redtangle_grpc::Status* _internal_mutable_game_status();
  public:
  void unsafe_arena_set_allocated_game_status(
      ::redtangle_grpc::Status* game_status);
  ::redtangle_grpc::Status* unsafe_arena_release_game_status();

  // @@protoc_insertion_point(class_scope:redtangle_grpc.GetStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::redtangle_grpc::Status* game_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class DisconnectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redtangle_grpc.DisconnectRequest) */ {
 public:
  inline DisconnectRequest() : DisconnectRequest(nullptr) {}
  ~DisconnectRequest() override;
  explicit PROTOBUF_CONSTEXPR DisconnectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisconnectRequest(const DisconnectRequest& from);
  DisconnectRequest(DisconnectRequest&& from) noexcept
    : DisconnectRequest() {
    *this = ::std::move(from);
  }

  inline DisconnectRequest& operator=(const DisconnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectRequest& operator=(DisconnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisconnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisconnectRequest* internal_default_instance() {
    return reinterpret_cast<const DisconnectRequest*>(
               &_DisconnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DisconnectRequest& a, DisconnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisconnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisconnectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisconnectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisconnectRequest& from) {
    DisconnectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.DisconnectRequest";
  }
  protected:
  explicit DisconnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 game_id = 1;
  void clear_game_id();
  int32_t game_id() const;
  void set_game_id(int32_t value);
  private:
  int32_t _internal_game_id() const;
  void _internal_set_game_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:redtangle_grpc.DisconnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    int32_t game_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_redtangle_2eproto;
};
// -------------------------------------------------------------------

class DisconnectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:redtangle_grpc.DisconnectResponse) */ {
 public:
  inline DisconnectResponse() : DisconnectResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DisconnectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisconnectResponse(const DisconnectResponse& from);
  DisconnectResponse(DisconnectResponse&& from) noexcept
    : DisconnectResponse() {
    *this = ::std::move(from);
  }

  inline DisconnectResponse& operator=(const DisconnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectResponse& operator=(DisconnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisconnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisconnectResponse* internal_default_instance() {
    return reinterpret_cast<const DisconnectResponse*>(
               &_DisconnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DisconnectResponse& a, DisconnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisconnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisconnectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DisconnectResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DisconnectResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redtangle_grpc.DisconnectResponse";
  }
  protected:
  explicit DisconnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:redtangle_grpc.DisconnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_redtangle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Piece

// .redtangle_grpc.Color team_color = 1;
inline void Piece::clear_team_color() {
  _impl_.team_color_ = 0;
}
inline ::redtangle_grpc::Color Piece::_internal_team_color() const {
  return static_cast< ::redtangle_grpc::Color >(_impl_.team_color_);
}
inline ::redtangle_grpc::Color Piece::team_color() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.Piece.team_color)
  return _internal_team_color();
}
inline void Piece::_internal_set_team_color(::redtangle_grpc::Color value) {
  
  _impl_.team_color_ = value;
}
inline void Piece::set_team_color(::redtangle_grpc::Color value) {
  _internal_set_team_color(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.Piece.team_color)
}

// repeated .redtangle_grpc.Color sides = 2;
inline int Piece::_internal_sides_size() const {
  return _impl_.sides_.size();
}
inline int Piece::sides_size() const {
  return _internal_sides_size();
}
inline void Piece::clear_sides() {
  _impl_.sides_.Clear();
}
inline ::redtangle_grpc::Color Piece::_internal_sides(int index) const {
  return static_cast< ::redtangle_grpc::Color >(_impl_.sides_.Get(index));
}
inline ::redtangle_grpc::Color Piece::sides(int index) const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.Piece.sides)
  return _internal_sides(index);
}
inline void Piece::set_sides(int index, ::redtangle_grpc::Color value) {
  _impl_.sides_.Set(index, value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.Piece.sides)
}
inline void Piece::_internal_add_sides(::redtangle_grpc::Color value) {
  _impl_.sides_.Add(value);
}
inline void Piece::add_sides(::redtangle_grpc::Color value) {
  _internal_add_sides(value);
  // @@protoc_insertion_point(field_add:redtangle_grpc.Piece.sides)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Piece::sides() const {
  // @@protoc_insertion_point(field_list:redtangle_grpc.Piece.sides)
  return _impl_.sides_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Piece::_internal_mutable_sides() {
  return &_impl_.sides_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Piece::mutable_sides() {
  // @@protoc_insertion_point(field_mutable_list:redtangle_grpc.Piece.sides)
  return _internal_mutable_sides();
}

// -------------------------------------------------------------------

// Status

// .redtangle_grpc.Color turn = 1;
inline void Status::clear_turn() {
  _impl_.turn_ = 0;
}
inline ::redtangle_grpc::Color Status::_internal_turn() const {
  return static_cast< ::redtangle_grpc::Color >(_impl_.turn_);
}
inline ::redtangle_grpc::Color Status::turn() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.Status.turn)
  return _internal_turn();
}
inline void Status::_internal_set_turn(::redtangle_grpc::Color value) {
  
  _impl_.turn_ = value;
}
inline void Status::set_turn(::redtangle_grpc::Color value) {
  _internal_set_turn(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.Status.turn)
}

// string winner = 2;
inline void Status::clear_winner() {
  _impl_.winner_.ClearToEmpty();
}
inline const std::string& Status::winner() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.Status.winner)
  return _internal_winner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_winner(ArgT0&& arg0, ArgT... args) {
 
 _impl_.winner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:redtangle_grpc.Status.winner)
}
inline std::string* Status::mutable_winner() {
  std::string* _s = _internal_mutable_winner();
  // @@protoc_insertion_point(field_mutable:redtangle_grpc.Status.winner)
  return _s;
}
inline const std::string& Status::_internal_winner() const {
  return _impl_.winner_.Get();
}
inline void Status::_internal_set_winner(const std::string& value) {
  
  _impl_.winner_.Set(value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_winner() {
  
  return _impl_.winner_.Mutable(GetArenaForAllocation());
}
inline std::string* Status::release_winner() {
  // @@protoc_insertion_point(field_release:redtangle_grpc.Status.winner)
  return _impl_.winner_.Release();
}
inline void Status::set_allocated_winner(std::string* winner) {
  if (winner != nullptr) {
    
  } else {
    
  }
  _impl_.winner_.SetAllocated(winner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.winner_.IsDefault()) {
    _impl_.winner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:redtangle_grpc.Status.winner)
}

// string opponent = 3;
inline void Status::clear_opponent() {
  _impl_.opponent_.ClearToEmpty();
}
inline const std::string& Status::opponent() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.Status.opponent)
  return _internal_opponent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_opponent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.opponent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:redtangle_grpc.Status.opponent)
}
inline std::string* Status::mutable_opponent() {
  std::string* _s = _internal_mutable_opponent();
  // @@protoc_insertion_point(field_mutable:redtangle_grpc.Status.opponent)
  return _s;
}
inline const std::string& Status::_internal_opponent() const {
  return _impl_.opponent_.Get();
}
inline void Status::_internal_set_opponent(const std::string& value) {
  
  _impl_.opponent_.Set(value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_opponent() {
  
  return _impl_.opponent_.Mutable(GetArenaForAllocation());
}
inline std::string* Status::release_opponent() {
  // @@protoc_insertion_point(field_release:redtangle_grpc.Status.opponent)
  return _impl_.opponent_.Release();
}
inline void Status::set_allocated_opponent(std::string* opponent) {
  if (opponent != nullptr) {
    
  } else {
    
  }
  _impl_.opponent_.SetAllocated(opponent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.opponent_.IsDefault()) {
    _impl_.opponent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:redtangle_grpc.Status.opponent)
}

// int32 white_pieces = 4;
inline void Status::clear_white_pieces() {
  _impl_.white_pieces_ = 0;
}
inline int32_t Status::_internal_white_pieces() const {
  return _impl_.white_pieces_;
}
inline int32_t Status::white_pieces() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.Status.white_pieces)
  return _internal_white_pieces();
}
inline void Status::_internal_set_white_pieces(int32_t value) {
  
  _impl_.white_pieces_ = value;
}
inline void Status::set_white_pieces(int32_t value) {
  _internal_set_white_pieces(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.Status.white_pieces)
}

// int32 black_pieces = 5;
inline void Status::clear_black_pieces() {
  _impl_.black_pieces_ = 0;
}
inline int32_t Status::_internal_black_pieces() const {
  return _impl_.black_pieces_;
}
inline int32_t Status::black_pieces() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.Status.black_pieces)
  return _internal_black_pieces();
}
inline void Status::_internal_set_black_pieces(int32_t value) {
  
  _impl_.black_pieces_ = value;
}
inline void Status::set_black_pieces(int32_t value) {
  _internal_set_black_pieces(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.Status.black_pieces)
}

// repeated .redtangle_grpc.Piece board = 6;
inline int Status::_internal_board_size() const {
  return _impl_.board_.size();
}
inline int Status::board_size() const {
  return _internal_board_size();
}
inline void Status::clear_board() {
  _impl_.board_.Clear();
}
inline ::redtangle_grpc::Piece* Status::mutable_board(int index) {
  // @@protoc_insertion_point(field_mutable:redtangle_grpc.Status.board)
  return _impl_.board_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redtangle_grpc::Piece >*
Status::mutable_board() {
  // @@protoc_insertion_point(field_mutable_list:redtangle_grpc.Status.board)
  return &_impl_.board_;
}
inline const ::redtangle_grpc::Piece& Status::_internal_board(int index) const {
  return _impl_.board_.Get(index);
}
inline const ::redtangle_grpc::Piece& Status::board(int index) const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.Status.board)
  return _internal_board(index);
}
inline ::redtangle_grpc::Piece* Status::_internal_add_board() {
  return _impl_.board_.Add();
}
inline ::redtangle_grpc::Piece* Status::add_board() {
  ::redtangle_grpc::Piece* _add = _internal_add_board();
  // @@protoc_insertion_point(field_add:redtangle_grpc.Status.board)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::redtangle_grpc::Piece >&
Status::board() const {
  // @@protoc_insertion_point(field_list:redtangle_grpc.Status.board)
  return _impl_.board_;
}

// -------------------------------------------------------------------

// ConnectRequest

// string user_name = 1;
inline void ConnectRequest::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& ConnectRequest::user_name() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.ConnectRequest.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectRequest::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:redtangle_grpc.ConnectRequest.user_name)
}
inline std::string* ConnectRequest::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:redtangle_grpc.ConnectRequest.user_name)
  return _s;
}
inline const std::string& ConnectRequest::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void ConnectRequest::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectRequest::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:redtangle_grpc.ConnectRequest.user_name)
  return _impl_.user_name_.Release();
}
inline void ConnectRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:redtangle_grpc.ConnectRequest.user_name)
}

// -------------------------------------------------------------------

// ConnectResponse

// int32 game_id = 1;
inline void ConnectResponse::clear_game_id() {
  _impl_.game_id_ = 0;
}
inline int32_t ConnectResponse::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int32_t ConnectResponse::game_id() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.ConnectResponse.game_id)
  return _internal_game_id();
}
inline void ConnectResponse::_internal_set_game_id(int32_t value) {
  
  _impl_.game_id_ = value;
}
inline void ConnectResponse::set_game_id(int32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.ConnectResponse.game_id)
}

// bool is_white = 2;
inline void ConnectResponse::clear_is_white() {
  _impl_.is_white_ = false;
}
inline bool ConnectResponse::_internal_is_white() const {
  return _impl_.is_white_;
}
inline bool ConnectResponse::is_white() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.ConnectResponse.is_white)
  return _internal_is_white();
}
inline void ConnectResponse::_internal_set_is_white(bool value) {
  
  _impl_.is_white_ = value;
}
inline void ConnectResponse::set_is_white(bool value) {
  _internal_set_is_white(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.ConnectResponse.is_white)
}

// -------------------------------------------------------------------

// SelectRequest

// int32 game_id = 1;
inline void SelectRequest::clear_game_id() {
  _impl_.game_id_ = 0;
}
inline int32_t SelectRequest::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int32_t SelectRequest::game_id() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.SelectRequest.game_id)
  return _internal_game_id();
}
inline void SelectRequest::_internal_set_game_id(int32_t value) {
  
  _impl_.game_id_ = value;
}
inline void SelectRequest::set_game_id(int32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.SelectRequest.game_id)
}

// string user_name = 2;
inline void SelectRequest::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& SelectRequest::user_name() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.SelectRequest.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SelectRequest::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:redtangle_grpc.SelectRequest.user_name)
}
inline std::string* SelectRequest::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:redtangle_grpc.SelectRequest.user_name)
  return _s;
}
inline const std::string& SelectRequest::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void SelectRequest::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectRequest::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SelectRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:redtangle_grpc.SelectRequest.user_name)
  return _impl_.user_name_.Release();
}
inline void SelectRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:redtangle_grpc.SelectRequest.user_name)
}

// int32 x = 3;
inline void SelectRequest::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t SelectRequest::_internal_x() const {
  return _impl_.x_;
}
inline int32_t SelectRequest::x() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.SelectRequest.x)
  return _internal_x();
}
inline void SelectRequest::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void SelectRequest::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.SelectRequest.x)
}

// int32 y = 4;
inline void SelectRequest::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t SelectRequest::_internal_y() const {
  return _impl_.y_;
}
inline int32_t SelectRequest::y() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.SelectRequest.y)
  return _internal_y();
}
inline void SelectRequest::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void SelectRequest::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.SelectRequest.y)
}

// -------------------------------------------------------------------

// SelectResponse

// bool success = 1;
inline void SelectResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool SelectResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool SelectResponse::success() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.SelectResponse.success)
  return _internal_success();
}
inline void SelectResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void SelectResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.SelectResponse.success)
}

// -------------------------------------------------------------------

// RotateRequest

// int32 game_id = 1;
inline void RotateRequest::clear_game_id() {
  _impl_.game_id_ = 0;
}
inline int32_t RotateRequest::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int32_t RotateRequest::game_id() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.RotateRequest.game_id)
  return _internal_game_id();
}
inline void RotateRequest::_internal_set_game_id(int32_t value) {
  
  _impl_.game_id_ = value;
}
inline void RotateRequest::set_game_id(int32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.RotateRequest.game_id)
}

// string user_name = 2;
inline void RotateRequest::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& RotateRequest::user_name() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.RotateRequest.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RotateRequest::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:redtangle_grpc.RotateRequest.user_name)
}
inline std::string* RotateRequest::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:redtangle_grpc.RotateRequest.user_name)
  return _s;
}
inline const std::string& RotateRequest::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void RotateRequest::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RotateRequest::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RotateRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:redtangle_grpc.RotateRequest.user_name)
  return _impl_.user_name_.Release();
}
inline void RotateRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:redtangle_grpc.RotateRequest.user_name)
}

// bool clockwise = 3;
inline void RotateRequest::clear_clockwise() {
  _impl_.clockwise_ = false;
}
inline bool RotateRequest::_internal_clockwise() const {
  return _impl_.clockwise_;
}
inline bool RotateRequest::clockwise() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.RotateRequest.clockwise)
  return _internal_clockwise();
}
inline void RotateRequest::_internal_set_clockwise(bool value) {
  
  _impl_.clockwise_ = value;
}
inline void RotateRequest::set_clockwise(bool value) {
  _internal_set_clockwise(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.RotateRequest.clockwise)
}

// -------------------------------------------------------------------

// RotateResponse

// bool success = 1;
inline void RotateResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool RotateResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool RotateResponse::success() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.RotateResponse.success)
  return _internal_success();
}
inline void RotateResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void RotateResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.RotateResponse.success)
}

// -------------------------------------------------------------------

// EndTurnRequest

// int32 game_id = 1;
inline void EndTurnRequest::clear_game_id() {
  _impl_.game_id_ = 0;
}
inline int32_t EndTurnRequest::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int32_t EndTurnRequest::game_id() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.EndTurnRequest.game_id)
  return _internal_game_id();
}
inline void EndTurnRequest::_internal_set_game_id(int32_t value) {
  
  _impl_.game_id_ = value;
}
inline void EndTurnRequest::set_game_id(int32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.EndTurnRequest.game_id)
}

// string user_name = 2;
inline void EndTurnRequest::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& EndTurnRequest::user_name() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.EndTurnRequest.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EndTurnRequest::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:redtangle_grpc.EndTurnRequest.user_name)
}
inline std::string* EndTurnRequest::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:redtangle_grpc.EndTurnRequest.user_name)
  return _s;
}
inline const std::string& EndTurnRequest::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void EndTurnRequest::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EndTurnRequest::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EndTurnRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:redtangle_grpc.EndTurnRequest.user_name)
  return _impl_.user_name_.Release();
}
inline void EndTurnRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:redtangle_grpc.EndTurnRequest.user_name)
}

// -------------------------------------------------------------------

// EndTurnResponse

// bool success = 1;
inline void EndTurnResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool EndTurnResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool EndTurnResponse::success() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.EndTurnResponse.success)
  return _internal_success();
}
inline void EndTurnResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void EndTurnResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.EndTurnResponse.success)
}

// -------------------------------------------------------------------

// GetStatusRequest

// int32 game_id = 1;
inline void GetStatusRequest::clear_game_id() {
  _impl_.game_id_ = 0;
}
inline int32_t GetStatusRequest::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int32_t GetStatusRequest::game_id() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.GetStatusRequest.game_id)
  return _internal_game_id();
}
inline void GetStatusRequest::_internal_set_game_id(int32_t value) {
  
  _impl_.game_id_ = value;
}
inline void GetStatusRequest::set_game_id(int32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.GetStatusRequest.game_id)
}

// string user_name = 2;
inline void GetStatusRequest::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& GetStatusRequest::user_name() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.GetStatusRequest.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetStatusRequest::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:redtangle_grpc.GetStatusRequest.user_name)
}
inline std::string* GetStatusRequest::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:redtangle_grpc.GetStatusRequest.user_name)
  return _s;
}
inline const std::string& GetStatusRequest::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void GetStatusRequest::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetStatusRequest::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetStatusRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:redtangle_grpc.GetStatusRequest.user_name)
  return _impl_.user_name_.Release();
}
inline void GetStatusRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:redtangle_grpc.GetStatusRequest.user_name)
}

// -------------------------------------------------------------------

// GetStatusResponse

// .redtangle_grpc.Status game_status = 1;
inline bool GetStatusResponse::_internal_has_game_status() const {
  return this != internal_default_instance() && _impl_.game_status_ != nullptr;
}
inline bool GetStatusResponse::has_game_status() const {
  return _internal_has_game_status();
}
inline void GetStatusResponse::clear_game_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_status_ != nullptr) {
    delete _impl_.game_status_;
  }
  _impl_.game_status_ = nullptr;
}
inline const ::redtangle_grpc::Status& GetStatusResponse::_internal_game_status() const {
  const ::redtangle_grpc::Status* p = _impl_.game_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::redtangle_grpc::Status&>(
      ::redtangle_grpc::_Status_default_instance_);
}
inline const ::redtangle_grpc::Status& GetStatusResponse::game_status() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.GetStatusResponse.game_status)
  return _internal_game_status();
}
inline void GetStatusResponse::unsafe_arena_set_allocated_game_status(
    ::redtangle_grpc::Status* game_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_status_);
  }
  _impl_.game_status_ = game_status;
  if (game_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redtangle_grpc.GetStatusResponse.game_status)
}
inline ::redtangle_grpc::Status* GetStatusResponse::release_game_status() {
  
  ::redtangle_grpc::Status* temp = _impl_.game_status_;
  _impl_.game_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::redtangle_grpc::Status* GetStatusResponse::unsafe_arena_release_game_status() {
  // @@protoc_insertion_point(field_release:redtangle_grpc.GetStatusResponse.game_status)
  
  ::redtangle_grpc::Status* temp = _impl_.game_status_;
  _impl_.game_status_ = nullptr;
  return temp;
}
inline ::redtangle_grpc::Status* GetStatusResponse::_internal_mutable_game_status() {
  
  if (_impl_.game_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::redtangle_grpc::Status>(GetArenaForAllocation());
    _impl_.game_status_ = p;
  }
  return _impl_.game_status_;
}
inline ::redtangle_grpc::Status* GetStatusResponse::mutable_game_status() {
  ::redtangle_grpc::Status* _msg = _internal_mutable_game_status();
  // @@protoc_insertion_point(field_mutable:redtangle_grpc.GetStatusResponse.game_status)
  return _msg;
}
inline void GetStatusResponse::set_allocated_game_status(::redtangle_grpc::Status* game_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.game_status_;
  }
  if (game_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(game_status);
    if (message_arena != submessage_arena) {
      game_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.game_status_ = game_status;
  // @@protoc_insertion_point(field_set_allocated:redtangle_grpc.GetStatusResponse.game_status)
}

// -------------------------------------------------------------------

// DisconnectRequest

// int32 game_id = 1;
inline void DisconnectRequest::clear_game_id() {
  _impl_.game_id_ = 0;
}
inline int32_t DisconnectRequest::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int32_t DisconnectRequest::game_id() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.DisconnectRequest.game_id)
  return _internal_game_id();
}
inline void DisconnectRequest::_internal_set_game_id(int32_t value) {
  
  _impl_.game_id_ = value;
}
inline void DisconnectRequest::set_game_id(int32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:redtangle_grpc.DisconnectRequest.game_id)
}

// string user_name = 2;
inline void DisconnectRequest::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& DisconnectRequest::user_name() const {
  // @@protoc_insertion_point(field_get:redtangle_grpc.DisconnectRequest.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisconnectRequest::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:redtangle_grpc.DisconnectRequest.user_name)
}
inline std::string* DisconnectRequest::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:redtangle_grpc.DisconnectRequest.user_name)
  return _s;
}
inline const std::string& DisconnectRequest::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void DisconnectRequest::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DisconnectRequest::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DisconnectRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:redtangle_grpc.DisconnectRequest.user_name)
  return _impl_.user_name_.Release();
}
inline void DisconnectRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:redtangle_grpc.DisconnectRequest.user_name)
}

// -------------------------------------------------------------------

// DisconnectResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace redtangle_grpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::redtangle_grpc::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::redtangle_grpc::Color>() {
  return ::redtangle_grpc::Color_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_redtangle_2eproto
