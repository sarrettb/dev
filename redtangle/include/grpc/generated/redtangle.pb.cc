// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redtangle.proto

#include "redtangle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace redtangle_grpc {
PROTOBUF_CONSTEXPR Piece::Piece(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sides_)*/{}
  , /*decltype(_impl_._sides_cached_byte_size_)*/{0}
  , /*decltype(_impl_.team_color_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PieceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PieceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PieceDefaultTypeInternal() {}
  union {
    Piece _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PieceDefaultTypeInternal _Piece_default_instance_;
PROTOBUF_CONSTEXPR Status::Status(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.board_)*/{}
  , /*decltype(_impl_.winner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.opponent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.turn_)*/0
  , /*decltype(_impl_.white_pieces_)*/0
  , /*decltype(_impl_.black_pieces_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
PROTOBUF_CONSTEXPR ConnectRequest::ConnectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectRequestDefaultTypeInternal() {}
  union {
    ConnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
PROTOBUF_CONSTEXPR ConnectResponse::ConnectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_id_)*/0
  , /*decltype(_impl_.is_white_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectResponseDefaultTypeInternal() {}
  union {
    ConnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
PROTOBUF_CONSTEXPR SelectRequest::SelectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_id_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectRequestDefaultTypeInternal() {}
  union {
    SelectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectRequestDefaultTypeInternal _SelectRequest_default_instance_;
PROTOBUF_CONSTEXPR SelectResponse::SelectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectResponseDefaultTypeInternal() {}
  union {
    SelectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectResponseDefaultTypeInternal _SelectResponse_default_instance_;
PROTOBUF_CONSTEXPR RotateRequest::RotateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_id_)*/0
  , /*decltype(_impl_.clockwise_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RotateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotateRequestDefaultTypeInternal() {}
  union {
    RotateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotateRequestDefaultTypeInternal _RotateRequest_default_instance_;
PROTOBUF_CONSTEXPR RotateResponse::RotateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RotateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotateResponseDefaultTypeInternal() {}
  union {
    RotateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotateResponseDefaultTypeInternal _RotateResponse_default_instance_;
PROTOBUF_CONSTEXPR EndTurnRequest::EndTurnRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EndTurnRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndTurnRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndTurnRequestDefaultTypeInternal() {}
  union {
    EndTurnRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndTurnRequestDefaultTypeInternal _EndTurnRequest_default_instance_;
PROTOBUF_CONSTEXPR EndTurnResponse::EndTurnResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EndTurnResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndTurnResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndTurnResponseDefaultTypeInternal() {}
  union {
    EndTurnResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndTurnResponseDefaultTypeInternal _EndTurnResponse_default_instance_;
PROTOBUF_CONSTEXPR GetStatusRequest::GetStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatusRequestDefaultTypeInternal() {}
  union {
    GetStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatusRequestDefaultTypeInternal _GetStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStatusResponse::GetStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatusResponseDefaultTypeInternal() {}
  union {
    GetStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatusResponseDefaultTypeInternal _GetStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR DisconnectRequest::DisconnectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DisconnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisconnectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisconnectRequestDefaultTypeInternal() {}
  union {
    DisconnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisconnectRequestDefaultTypeInternal _DisconnectRequest_default_instance_;
PROTOBUF_CONSTEXPR DisconnectResponse::DisconnectResponse(
    ::_pbi::ConstantInitialized) {}
struct DisconnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisconnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisconnectResponseDefaultTypeInternal() {}
  union {
    DisconnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisconnectResponseDefaultTypeInternal _DisconnectResponse_default_instance_;
}  // namespace redtangle_grpc
static ::_pb::Metadata file_level_metadata_redtangle_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_redtangle_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_redtangle_2eproto = nullptr;

const uint32_t TableStruct_redtangle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::Piece, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::Piece, _impl_.team_color_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::Piece, _impl_.sides_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::Status, _impl_.turn_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::Status, _impl_.winner_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::Status, _impl_.opponent_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::Status, _impl_.white_pieces_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::Status, _impl_.black_pieces_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::Status, _impl_.board_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::ConnectRequest, _impl_.user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::ConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::ConnectResponse, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::ConnectResponse, _impl_.is_white_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::SelectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::SelectRequest, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::SelectRequest, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::SelectRequest, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::SelectRequest, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::SelectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::SelectResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::RotateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::RotateRequest, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::RotateRequest, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::RotateRequest, _impl_.clockwise_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::RotateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::RotateResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::EndTurnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::EndTurnRequest, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::EndTurnRequest, _impl_.user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::EndTurnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::EndTurnResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::GetStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::GetStatusRequest, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::GetStatusRequest, _impl_.user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::GetStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::GetStatusResponse, _impl_.game_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::DisconnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::DisconnectRequest, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::DisconnectRequest, _impl_.user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::redtangle_grpc::DisconnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::redtangle_grpc::Piece)},
  { 8, -1, -1, sizeof(::redtangle_grpc::Status)},
  { 20, -1, -1, sizeof(::redtangle_grpc::ConnectRequest)},
  { 27, -1, -1, sizeof(::redtangle_grpc::ConnectResponse)},
  { 35, -1, -1, sizeof(::redtangle_grpc::SelectRequest)},
  { 45, -1, -1, sizeof(::redtangle_grpc::SelectResponse)},
  { 52, -1, -1, sizeof(::redtangle_grpc::RotateRequest)},
  { 61, -1, -1, sizeof(::redtangle_grpc::RotateResponse)},
  { 68, -1, -1, sizeof(::redtangle_grpc::EndTurnRequest)},
  { 76, -1, -1, sizeof(::redtangle_grpc::EndTurnResponse)},
  { 83, -1, -1, sizeof(::redtangle_grpc::GetStatusRequest)},
  { 91, -1, -1, sizeof(::redtangle_grpc::GetStatusResponse)},
  { 98, -1, -1, sizeof(::redtangle_grpc::DisconnectRequest)},
  { 106, -1, -1, sizeof(::redtangle_grpc::DisconnectResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::redtangle_grpc::_Piece_default_instance_._instance,
  &::redtangle_grpc::_Status_default_instance_._instance,
  &::redtangle_grpc::_ConnectRequest_default_instance_._instance,
  &::redtangle_grpc::_ConnectResponse_default_instance_._instance,
  &::redtangle_grpc::_SelectRequest_default_instance_._instance,
  &::redtangle_grpc::_SelectResponse_default_instance_._instance,
  &::redtangle_grpc::_RotateRequest_default_instance_._instance,
  &::redtangle_grpc::_RotateResponse_default_instance_._instance,
  &::redtangle_grpc::_EndTurnRequest_default_instance_._instance,
  &::redtangle_grpc::_EndTurnResponse_default_instance_._instance,
  &::redtangle_grpc::_GetStatusRequest_default_instance_._instance,
  &::redtangle_grpc::_GetStatusResponse_default_instance_._instance,
  &::redtangle_grpc::_DisconnectRequest_default_instance_._instance,
  &::redtangle_grpc::_DisconnectResponse_default_instance_._instance,
};

const char descriptor_table_protodef_redtangle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017redtangle.proto\022\016redtangle_grpc\"X\n\005Pie"
  "ce\022)\n\nteam_color\030\001 \001(\0162\025.redtangle_grpc."
  "Color\022$\n\005sides\030\002 \003(\0162\025.redtangle_grpc.Co"
  "lor\"\241\001\n\006Status\022#\n\004turn\030\001 \001(\0162\025.redtangle"
  "_grpc.Color\022\016\n\006winner\030\002 \001(\t\022\020\n\010opponent\030"
  "\003 \001(\t\022\024\n\014white_pieces\030\004 \001(\005\022\024\n\014black_pie"
  "ces\030\005 \001(\005\022$\n\005board\030\006 \003(\0132\025.redtangle_grp"
  "c.Piece\"#\n\016ConnectRequest\022\021\n\tuser_name\030\001"
  " \001(\t\"4\n\017ConnectResponse\022\017\n\007game_id\030\001 \001(\005"
  "\022\020\n\010is_white\030\002 \001(\010\"I\n\rSelectRequest\022\017\n\007g"
  "ame_id\030\001 \001(\005\022\021\n\tuser_name\030\002 \001(\t\022\t\n\001x\030\003 \001"
  "(\005\022\t\n\001y\030\004 \001(\005\"!\n\016SelectResponse\022\017\n\007succe"
  "ss\030\001 \001(\010\"F\n\rRotateRequest\022\017\n\007game_id\030\001 \001"
  "(\005\022\021\n\tuser_name\030\002 \001(\t\022\021\n\tclockwise\030\003 \001(\010"
  "\"!\n\016RotateResponse\022\017\n\007success\030\001 \001(\010\"4\n\016E"
  "ndTurnRequest\022\017\n\007game_id\030\001 \001(\005\022\021\n\tuser_n"
  "ame\030\002 \001(\t\"\"\n\017EndTurnResponse\022\017\n\007success\030"
  "\001 \001(\010\"6\n\020GetStatusRequest\022\017\n\007game_id\030\001 \001"
  "(\005\022\021\n\tuser_name\030\002 \001(\t\"@\n\021GetStatusRespon"
  "se\022+\n\013game_status\030\001 \001(\0132\026.redtangle_grpc"
  ".Status\"7\n\021DisconnectRequest\022\017\n\007game_id\030"
  "\001 \001(\005\022\021\n\tuser_name\030\002 \001(\t\"\024\n\022DisconnectRe"
  "sponse*\035\n\005Color\022\t\n\005WHITE\020\000\022\t\n\005BLACK\020\0012\350\003"
  "\n\tRedtangle\022L\n\007Connect\022\036.redtangle_grpc."
  "ConnectRequest\032\037.redtangle_grpc.ConnectR"
  "esponse\"\000\022I\n\006Select\022\035.redtangle_grpc.Sel"
  "ectRequest\032\036.redtangle_grpc.SelectRespon"
  "se\"\000\022I\n\006Rotate\022\035.redtangle_grpc.RotateRe"
  "quest\032\036.redtangle_grpc.RotateResponse\"\000\022"
  "L\n\007EndTurn\022\036.redtangle_grpc.EndTurnReque"
  "st\032\037.redtangle_grpc.EndTurnResponse\"\000\022R\n"
  "\tGetStatus\022 .redtangle_grpc.GetStatusReq"
  "uest\032!.redtangle_grpc.GetStatusResponse\""
  "\000\022U\n\nDisconnect\022!.redtangle_grpc.Disconn"
  "ectRequest\032\".redtangle_grpc.DisconnectRe"
  "sponse\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_redtangle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_redtangle_2eproto = {
    false, false, 1416, descriptor_table_protodef_redtangle_2eproto,
    "redtangle.proto",
    &descriptor_table_redtangle_2eproto_once, nullptr, 0, 14,
    schemas, file_default_instances, TableStruct_redtangle_2eproto::offsets,
    file_level_metadata_redtangle_2eproto, file_level_enum_descriptors_redtangle_2eproto,
    file_level_service_descriptors_redtangle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_redtangle_2eproto_getter() {
  return &descriptor_table_redtangle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_redtangle_2eproto(&descriptor_table_redtangle_2eproto);
namespace redtangle_grpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_redtangle_2eproto);
  return file_level_enum_descriptors_redtangle_2eproto[0];
}
bool Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Piece::_Internal {
 public:
};

Piece::Piece(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.Piece)
}
Piece::Piece(const Piece& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Piece* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sides_){from._impl_.sides_}
    , /*decltype(_impl_._sides_cached_byte_size_)*/{0}
    , decltype(_impl_.team_color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.team_color_ = from._impl_.team_color_;
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.Piece)
}

inline void Piece::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sides_){arena}
    , /*decltype(_impl_._sides_cached_byte_size_)*/{0}
    , decltype(_impl_.team_color_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Piece::~Piece() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.Piece)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Piece::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sides_.~RepeatedField();
}

void Piece::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Piece::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.Piece)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sides_.Clear();
  _impl_.team_color_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Piece::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .redtangle_grpc.Color team_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_team_color(static_cast<::redtangle_grpc::Color>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .redtangle_grpc.Color sides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_sides(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_sides(static_cast<::redtangle_grpc::Color>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Piece::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.Piece)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .redtangle_grpc.Color team_color = 1;
  if (this->_internal_team_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team_color(), target);
  }

  // repeated .redtangle_grpc.Color sides = 2;
  {
    int byte_size = _impl_._sides_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.sides_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.Piece)
  return target;
}

size_t Piece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.Piece)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .redtangle_grpc.Color sides = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_sides_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_sides(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sides_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .redtangle_grpc.Color team_color = 1;
  if (this->_internal_team_color() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_team_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Piece::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Piece::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Piece::GetClassData() const { return &_class_data_; }


void Piece::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Piece*>(&to_msg);
  auto& from = static_cast<const Piece&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.Piece)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sides_.MergeFrom(from._impl_.sides_);
  if (from._internal_team_color() != 0) {
    _this->_internal_set_team_color(from._internal_team_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Piece::CopyFrom(const Piece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.Piece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Piece::IsInitialized() const {
  return true;
}

void Piece::InternalSwap(Piece* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sides_.InternalSwap(&other->_impl_.sides_);
  swap(_impl_.team_color_, other->_impl_.team_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Piece::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[0]);
}

// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Status* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.board_){from._impl_.board_}
    , decltype(_impl_.winner_){}
    , decltype(_impl_.opponent_){}
    , decltype(_impl_.turn_){}
    , decltype(_impl_.white_pieces_){}
    , decltype(_impl_.black_pieces_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.winner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.winner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_winner().empty()) {
    _this->_impl_.winner_.Set(from._internal_winner(), 
      _this->GetArenaForAllocation());
  }
  _impl_.opponent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.opponent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opponent().empty()) {
    _this->_impl_.opponent_.Set(from._internal_opponent(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.turn_, &from._impl_.turn_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.black_pieces_) -
    reinterpret_cast<char*>(&_impl_.turn_)) + sizeof(_impl_.black_pieces_));
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.Status)
}

inline void Status::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.board_){arena}
    , decltype(_impl_.winner_){}
    , decltype(_impl_.opponent_){}
    , decltype(_impl_.turn_){0}
    , decltype(_impl_.white_pieces_){0}
    , decltype(_impl_.black_pieces_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.winner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.winner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.opponent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.opponent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.board_.~RepeatedPtrField();
  _impl_.winner_.Destroy();
  _impl_.opponent_.Destroy();
}

void Status::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.board_.Clear();
  _impl_.winner_.ClearToEmpty();
  _impl_.opponent_.ClearToEmpty();
  ::memset(&_impl_.turn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.black_pieces_) -
      reinterpret_cast<char*>(&_impl_.turn_)) + sizeof(_impl_.black_pieces_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .redtangle_grpc.Color turn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_turn(static_cast<::redtangle_grpc::Color>(val));
        } else
          goto handle_unusual;
        continue;
      // string winner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_winner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "redtangle_grpc.Status.winner"));
        } else
          goto handle_unusual;
        continue;
      // string opponent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_opponent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "redtangle_grpc.Status.opponent"));
        } else
          goto handle_unusual;
        continue;
      // int32 white_pieces = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.white_pieces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 black_pieces = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.black_pieces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .redtangle_grpc.Piece board = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_board(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .redtangle_grpc.Color turn = 1;
  if (this->_internal_turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_turn(), target);
  }

  // string winner = 2;
  if (!this->_internal_winner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_winner().data(), static_cast<int>(this->_internal_winner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "redtangle_grpc.Status.winner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_winner(), target);
  }

  // string opponent = 3;
  if (!this->_internal_opponent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opponent().data(), static_cast<int>(this->_internal_opponent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "redtangle_grpc.Status.opponent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_opponent(), target);
  }

  // int32 white_pieces = 4;
  if (this->_internal_white_pieces() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_white_pieces(), target);
  }

  // int32 black_pieces = 5;
  if (this->_internal_black_pieces() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_black_pieces(), target);
  }

  // repeated .redtangle_grpc.Piece board = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_board_size()); i < n; i++) {
    const auto& repfield = this->_internal_board(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .redtangle_grpc.Piece board = 6;
  total_size += 1UL * this->_internal_board_size();
  for (const auto& msg : this->_impl_.board_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string winner = 2;
  if (!this->_internal_winner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_winner());
  }

  // string opponent = 3;
  if (!this->_internal_opponent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opponent());
  }

  // .redtangle_grpc.Color turn = 1;
  if (this->_internal_turn() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_turn());
  }

  // int32 white_pieces = 4;
  if (this->_internal_white_pieces() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_white_pieces());
  }

  // int32 black_pieces = 5;
  if (this->_internal_black_pieces() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_black_pieces());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }


void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.Status)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.board_.MergeFrom(from._impl_.board_);
  if (!from._internal_winner().empty()) {
    _this->_internal_set_winner(from._internal_winner());
  }
  if (!from._internal_opponent().empty()) {
    _this->_internal_set_opponent(from._internal_opponent());
  }
  if (from._internal_turn() != 0) {
    _this->_internal_set_turn(from._internal_turn());
  }
  if (from._internal_white_pieces() != 0) {
    _this->_internal_set_white_pieces(from._internal_white_pieces());
  }
  if (from._internal_black_pieces() != 0) {
    _this->_internal_set_black_pieces(from._internal_black_pieces());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.board_.InternalSwap(&other->_impl_.board_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.winner_, lhs_arena,
      &other->_impl_.winner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.opponent_, lhs_arena,
      &other->_impl_.opponent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, _impl_.black_pieces_)
      + sizeof(Status::_impl_.black_pieces_)
      - PROTOBUF_FIELD_OFFSET(Status, _impl_.turn_)>(
          reinterpret_cast<char*>(&_impl_.turn_),
          reinterpret_cast<char*>(&other->_impl_.turn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[1]);
}

// ===================================================================

class ConnectRequest::_Internal {
 public:
};

ConnectRequest::ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.ConnectRequest)
}
ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.ConnectRequest)
}

inline void ConnectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.ConnectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void ConnectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.ConnectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "redtangle_grpc.ConnectRequest.user_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.ConnectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "redtangle_grpc.ConnectRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.ConnectRequest)
  return target;
}

size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.ConnectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectRequest::GetClassData() const { return &_class_data_; }


void ConnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectRequest*>(&to_msg);
  auto& from = static_cast<const ConnectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  return true;
}

void ConnectRequest::InternalSwap(ConnectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[2]);
}

// ===================================================================

class ConnectResponse::_Internal {
 public:
};

ConnectResponse::ConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.ConnectResponse)
}
ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_id_){}
    , decltype(_impl_.is_white_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_id_, &from._impl_.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_white_) -
    reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.is_white_));
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.ConnectResponse)
}

inline void ConnectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_id_){0}
    , decltype(_impl_.is_white_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConnectResponse::~ConnectResponse() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.ConnectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.ConnectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_white_) -
      reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.is_white_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_white = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_white_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.ConnectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // bool is_white = 2;
  if (this->_internal_is_white() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_white(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.ConnectResponse)
  return target;
}

size_t ConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.ConnectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_id());
  }

  // bool is_white = 2;
  if (this->_internal_is_white() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectResponse::GetClassData() const { return &_class_data_; }


void ConnectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectResponse*>(&to_msg);
  auto& from = static_cast<const ConnectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (from._internal_is_white() != 0) {
    _this->_internal_set_is_white(from._internal_is_white());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  return true;
}

void ConnectResponse::InternalSwap(ConnectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectResponse, _impl_.is_white_)
      + sizeof(ConnectResponse::_impl_.is_white_)
      - PROTOBUF_FIELD_OFFSET(ConnectResponse, _impl_.game_id_)>(
          reinterpret_cast<char*>(&_impl_.game_id_),
          reinterpret_cast<char*>(&other->_impl_.game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[3]);
}

// ===================================================================

class SelectRequest::_Internal {
 public:
};

SelectRequest::SelectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.SelectRequest)
}
SelectRequest::SelectRequest(const SelectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.game_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.game_id_, &from._impl_.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.SelectRequest)
}

inline void SelectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.game_id_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectRequest::~SelectRequest() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.SelectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void SelectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.SelectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  ::memset(&_impl_.game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "redtangle_grpc.SelectRequest.user_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.SelectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "redtangle_grpc.SelectRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.SelectRequest)
  return target;
}

size_t SelectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.SelectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_id());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectRequest::GetClassData() const { return &_class_data_; }


void SelectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectRequest*>(&to_msg);
  auto& from = static_cast<const SelectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.SelectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectRequest::CopyFrom(const SelectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.SelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRequest::IsInitialized() const {
  return true;
}

void SelectRequest::InternalSwap(SelectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectRequest, _impl_.y_)
      + sizeof(SelectRequest::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(SelectRequest, _impl_.game_id_)>(
          reinterpret_cast<char*>(&_impl_.game_id_),
          reinterpret_cast<char*>(&other->_impl_.game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[4]);
}

// ===================================================================

class SelectResponse::_Internal {
 public:
};

SelectResponse::SelectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.SelectResponse)
}
SelectResponse::SelectResponse(const SelectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.SelectResponse)
}

inline void SelectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectResponse::~SelectResponse() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.SelectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SelectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.SelectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.SelectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.SelectResponse)
  return target;
}

size_t SelectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.SelectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectResponse::GetClassData() const { return &_class_data_; }


void SelectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectResponse*>(&to_msg);
  auto& from = static_cast<const SelectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.SelectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectResponse::CopyFrom(const SelectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.SelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectResponse::IsInitialized() const {
  return true;
}

void SelectResponse::InternalSwap(SelectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[5]);
}

// ===================================================================

class RotateRequest::_Internal {
 public:
};

RotateRequest::RotateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.RotateRequest)
}
RotateRequest::RotateRequest(const RotateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RotateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.game_id_){}
    , decltype(_impl_.clockwise_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.game_id_, &from._impl_.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clockwise_) -
    reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.clockwise_));
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.RotateRequest)
}

inline void RotateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.game_id_){0}
    , decltype(_impl_.clockwise_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RotateRequest::~RotateRequest() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.RotateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RotateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void RotateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RotateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.RotateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  ::memset(&_impl_.game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clockwise_) -
      reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.clockwise_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RotateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "redtangle_grpc.RotateRequest.user_name"));
        } else
          goto handle_unusual;
        continue;
      // bool clockwise = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.clockwise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RotateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.RotateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "redtangle_grpc.RotateRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // bool clockwise = 3;
  if (this->_internal_clockwise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_clockwise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.RotateRequest)
  return target;
}

size_t RotateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.RotateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_id());
  }

  // bool clockwise = 3;
  if (this->_internal_clockwise() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RotateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RotateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RotateRequest::GetClassData() const { return &_class_data_; }


void RotateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RotateRequest*>(&to_msg);
  auto& from = static_cast<const RotateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.RotateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (from._internal_clockwise() != 0) {
    _this->_internal_set_clockwise(from._internal_clockwise());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RotateRequest::CopyFrom(const RotateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.RotateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotateRequest::IsInitialized() const {
  return true;
}

void RotateRequest::InternalSwap(RotateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RotateRequest, _impl_.clockwise_)
      + sizeof(RotateRequest::_impl_.clockwise_)
      - PROTOBUF_FIELD_OFFSET(RotateRequest, _impl_.game_id_)>(
          reinterpret_cast<char*>(&_impl_.game_id_),
          reinterpret_cast<char*>(&other->_impl_.game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RotateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[6]);
}

// ===================================================================

class RotateResponse::_Internal {
 public:
};

RotateResponse::RotateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.RotateResponse)
}
RotateResponse::RotateResponse(const RotateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RotateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.RotateResponse)
}

inline void RotateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RotateResponse::~RotateResponse() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.RotateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RotateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RotateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RotateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.RotateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RotateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RotateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.RotateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.RotateResponse)
  return target;
}

size_t RotateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.RotateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RotateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RotateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RotateResponse::GetClassData() const { return &_class_data_; }


void RotateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RotateResponse*>(&to_msg);
  auto& from = static_cast<const RotateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.RotateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RotateResponse::CopyFrom(const RotateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.RotateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotateResponse::IsInitialized() const {
  return true;
}

void RotateResponse::InternalSwap(RotateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RotateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[7]);
}

// ===================================================================

class EndTurnRequest::_Internal {
 public:
};

EndTurnRequest::EndTurnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.EndTurnRequest)
}
EndTurnRequest::EndTurnRequest(const EndTurnRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EndTurnRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.game_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.game_id_ = from._impl_.game_id_;
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.EndTurnRequest)
}

inline void EndTurnRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.game_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EndTurnRequest::~EndTurnRequest() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.EndTurnRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndTurnRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void EndTurnRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EndTurnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.EndTurnRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _impl_.game_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndTurnRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "redtangle_grpc.EndTurnRequest.user_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndTurnRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.EndTurnRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "redtangle_grpc.EndTurnRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.EndTurnRequest)
  return target;
}

size_t EndTurnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.EndTurnRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndTurnRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EndTurnRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndTurnRequest::GetClassData() const { return &_class_data_; }


void EndTurnRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EndTurnRequest*>(&to_msg);
  auto& from = static_cast<const EndTurnRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.EndTurnRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndTurnRequest::CopyFrom(const EndTurnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.EndTurnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndTurnRequest::IsInitialized() const {
  return true;
}

void EndTurnRequest::InternalSwap(EndTurnRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  swap(_impl_.game_id_, other->_impl_.game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndTurnRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[8]);
}

// ===================================================================

class EndTurnResponse::_Internal {
 public:
};

EndTurnResponse::EndTurnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.EndTurnResponse)
}
EndTurnResponse::EndTurnResponse(const EndTurnResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EndTurnResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.EndTurnResponse)
}

inline void EndTurnResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EndTurnResponse::~EndTurnResponse() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.EndTurnResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndTurnResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EndTurnResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EndTurnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.EndTurnResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndTurnResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndTurnResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.EndTurnResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.EndTurnResponse)
  return target;
}

size_t EndTurnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.EndTurnResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndTurnResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EndTurnResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndTurnResponse::GetClassData() const { return &_class_data_; }


void EndTurnResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EndTurnResponse*>(&to_msg);
  auto& from = static_cast<const EndTurnResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.EndTurnResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndTurnResponse::CopyFrom(const EndTurnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.EndTurnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndTurnResponse::IsInitialized() const {
  return true;
}

void EndTurnResponse::InternalSwap(EndTurnResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndTurnResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[9]);
}

// ===================================================================

class GetStatusRequest::_Internal {
 public:
};

GetStatusRequest::GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.GetStatusRequest)
}
GetStatusRequest::GetStatusRequest(const GetStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.game_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.game_id_ = from._impl_.game_id_;
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.GetStatusRequest)
}

inline void GetStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.game_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStatusRequest::~GetStatusRequest() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.GetStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void GetStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.GetStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _impl_.game_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "redtangle_grpc.GetStatusRequest.user_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.GetStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "redtangle_grpc.GetStatusRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.GetStatusRequest)
  return target;
}

size_t GetStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.GetStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatusRequest::GetClassData() const { return &_class_data_; }


void GetStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatusRequest*>(&to_msg);
  auto& from = static_cast<const GetStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatusRequest::CopyFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusRequest::IsInitialized() const {
  return true;
}

void GetStatusRequest::InternalSwap(GetStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  swap(_impl_.game_id_, other->_impl_.game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[10]);
}

// ===================================================================

class GetStatusResponse::_Internal {
 public:
  static const ::redtangle_grpc::Status& game_status(const GetStatusResponse* msg);
};

const ::redtangle_grpc::Status&
GetStatusResponse::_Internal::game_status(const GetStatusResponse* msg) {
  return *msg->_impl_.game_status_;
}
GetStatusResponse::GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.GetStatusResponse)
}
GetStatusResponse::GetStatusResponse(const GetStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_status()) {
    _this->_impl_.game_status_ = new ::redtangle_grpc::Status(*from._impl_.game_status_);
  }
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.GetStatusResponse)
}

inline void GetStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetStatusResponse::~GetStatusResponse() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.GetStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_status_;
}

void GetStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.GetStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_status_ != nullptr) {
    delete _impl_.game_status_;
  }
  _impl_.game_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .redtangle_grpc.Status game_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.GetStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .redtangle_grpc.Status game_status = 1;
  if (this->_internal_has_game_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_status(this),
        _Internal::game_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.GetStatusResponse)
  return target;
}

size_t GetStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.GetStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .redtangle_grpc.Status game_status = 1;
  if (this->_internal_has_game_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatusResponse::GetClassData() const { return &_class_data_; }


void GetStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatusResponse*>(&to_msg);
  auto& from = static_cast<const GetStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_status()) {
    _this->_internal_mutable_game_status()->::redtangle_grpc::Status::MergeFrom(
        from._internal_game_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatusResponse::CopyFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusResponse::IsInitialized() const {
  return true;
}

void GetStatusResponse::InternalSwap(GetStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.game_status_, other->_impl_.game_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[11]);
}

// ===================================================================

class DisconnectRequest::_Internal {
 public:
};

DisconnectRequest::DisconnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.DisconnectRequest)
}
DisconnectRequest::DisconnectRequest(const DisconnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisconnectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.game_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.game_id_ = from._impl_.game_id_;
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.DisconnectRequest)
}

inline void DisconnectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.game_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DisconnectRequest::~DisconnectRequest() {
  // @@protoc_insertion_point(destructor:redtangle_grpc.DisconnectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisconnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void DisconnectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisconnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:redtangle_grpc.DisconnectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _impl_.game_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisconnectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "redtangle_grpc.DisconnectRequest.user_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisconnectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:redtangle_grpc.DisconnectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "redtangle_grpc.DisconnectRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:redtangle_grpc.DisconnectRequest)
  return target;
}

size_t DisconnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:redtangle_grpc.DisconnectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int32 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisconnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisconnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisconnectRequest::GetClassData() const { return &_class_data_; }


void DisconnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisconnectRequest*>(&to_msg);
  auto& from = static_cast<const DisconnectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:redtangle_grpc.DisconnectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisconnectRequest::CopyFrom(const DisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:redtangle_grpc.DisconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectRequest::IsInitialized() const {
  return true;
}

void DisconnectRequest::InternalSwap(DisconnectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  swap(_impl_.game_id_, other->_impl_.game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[12]);
}

// ===================================================================

class DisconnectResponse::_Internal {
 public:
};

DisconnectResponse::DisconnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:redtangle_grpc.DisconnectResponse)
}
DisconnectResponse::DisconnectResponse(const DisconnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DisconnectResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:redtangle_grpc.DisconnectResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisconnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisconnectResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DisconnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_redtangle_2eproto_getter, &descriptor_table_redtangle_2eproto_once,
      file_level_metadata_redtangle_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace redtangle_grpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::redtangle_grpc::Piece*
Arena::CreateMaybeMessage< ::redtangle_grpc::Piece >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::Piece >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::Status*
Arena::CreateMaybeMessage< ::redtangle_grpc::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::ConnectRequest*
Arena::CreateMaybeMessage< ::redtangle_grpc::ConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::ConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::ConnectResponse*
Arena::CreateMaybeMessage< ::redtangle_grpc::ConnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::ConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::SelectRequest*
Arena::CreateMaybeMessage< ::redtangle_grpc::SelectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::SelectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::SelectResponse*
Arena::CreateMaybeMessage< ::redtangle_grpc::SelectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::SelectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::RotateRequest*
Arena::CreateMaybeMessage< ::redtangle_grpc::RotateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::RotateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::RotateResponse*
Arena::CreateMaybeMessage< ::redtangle_grpc::RotateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::RotateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::EndTurnRequest*
Arena::CreateMaybeMessage< ::redtangle_grpc::EndTurnRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::EndTurnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::EndTurnResponse*
Arena::CreateMaybeMessage< ::redtangle_grpc::EndTurnResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::EndTurnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::GetStatusRequest*
Arena::CreateMaybeMessage< ::redtangle_grpc::GetStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::GetStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::GetStatusResponse*
Arena::CreateMaybeMessage< ::redtangle_grpc::GetStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::GetStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::DisconnectRequest*
Arena::CreateMaybeMessage< ::redtangle_grpc::DisconnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::DisconnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::redtangle_grpc::DisconnectResponse*
Arena::CreateMaybeMessage< ::redtangle_grpc::DisconnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::redtangle_grpc::DisconnectResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
